# -*- coding: utf-8 -*-
"""1-FirstExerciseML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kOpP45mt4lTKuJFrv5Xt23ktmkhQjr7N
"""

# importing tensorflow, numpy libraries and from Keras API importing Sequential, Dense.
import tensorflow as tf
import numpy as np
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

# Defining a simple sequential neural network model consisting of a single dense layer with 1 unit and an input shape of [1].
# The input shape of [1] indicates a single input value. The dense layer is a fully connected layer where each unit is connected to all the inputs.
model = Sequential([Dense(units=1, input_shape=[1])])

# Compiling the model by setting the optimization algorithm to use during training, here, "stochastic gradient descent."
# The loss function, mean squared error is used to measure the difference between predicted and true output during the training process.
# The optimizer and loss function determines how the model is updated during training to reduce the loss and improve its accuracy.
model.compile(optimizer='sgd', loss='mean_squared_error')

xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype=float)

# The fit method trains the model using inputs, xs and corresponding outputs, ys. Model is trained over 500 epochs.
# An epoch is a complete iteration over the entire training dataset. 
model.fit(xs, ys, epochs=500)

# now we try to predict a value. Actual value is 19 but small amount of data gives only a predicted value.
print(model.predict([10.0]))
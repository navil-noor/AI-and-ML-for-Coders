# -*- coding: utf-8 -*-
"""2-ComputerVisionProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H2Unpw41BZ6UyeMqJK9s1G1MZPz0fa1o
"""

import tensorflow as tf

# Callback function to check when accuracy reaches above 95% then stop the training
# on_epoch_end function gives us details about the logs for the epoch
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95):
      print("\nReached 95% accuracy so cancelling training!")
      self.model.stop_training = True

# Creating an instance (callbacks) of the myCallback class 
# Accessing the data using the tensorflow datasets and storing to mnist
callbacks = myCallback()
mnist = tf.keras.datasets.fashion_mnist

# load data method to return the training and testing images
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# normalizing the images to improve performance
# grayscale (values between 0 and 255) images divided by 255 makes every pixel represented by a number between 0 and 1
train_images = train_images / 255.0
test_images = test_images / 255.0

# The first layer takes the 28x28 input shape (representing an image) and flattens it into a 1-dimensional array of 784 values.
# The next layer with 128 neurons, uses the Rectified Linear Unit (ReLU) activation function and applies it to the weighted sum of the inputs with the result.
# The final layer with 10 neurons, uses the Softmax activation function to produce the probabilities for each of the 10 possible labels (0-9).
# The Softmax function ensures that the outputs are all non-negative and sum to 1, representing a probability distribution over the possible labels.
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation=tf.nn.relu),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])

# Adam (Adaptive Moment Estimation) is an evolution of the SGD, used for training large and complex neural networks. More efficient and faster.
# Sparse Categorical Crossentropy is used in order to select category.
# Accuracy metric will return how often it correctly matched the input pixels to the output label.
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Training the network by fitting the training images to the training labels over fifty epochs
# During training, end of each epoch the callback function is called to check if accuracy is 95%
model.fit(train_images, train_labels, epochs=50,
          callbacks=[callbacks])

# Evaluate the model
model.evaluate(test_images, test_labels)

# Store predictions to classification array. Test first value [0] against first image in the test set, test_labels[0]
classifications = model.predict(test_images)
print(classifications[0])
print(test_labels[0])